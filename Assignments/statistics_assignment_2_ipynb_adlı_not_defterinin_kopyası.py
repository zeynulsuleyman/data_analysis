# -*- coding: utf-8 -*-
"""Statistics Assignment-2.ipynb adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U0wSI6DK9L_nHRhSKBEI8iqmnYW4DyVa

## Descriptive Statistics

Import **NumPy**, **SciPy**, and **Pandas**
"""

import numpy as np
import scipy as sci
import pandas as pd

import
import
import

""" Randomly generate 1,000 samples from the normal distribution using `np.random.normal()`(mean = 100, standard deviation = 15)"""

normal_dist = np.random.normal(100, 15, (50, 20))
normal_dist

samples =

"""Compute the **mean**, **median**, and **mode**"""

from scipy import stats

mean = np.mean(normal_dist)
median = np.median(normal_dist)
mode = stats.mode(normal_dist)

print("Mean: ", mean)
print("Median: ", median)
print("Mode: ", mode)

"""Compute the **min**, **max**, **Q1**, **Q3**, and **interquartile range**"""

min = np.min(normal_dist)
max = np.max(normal_dist)
q1 = np.percentile(normal_dist, 1)
q3 = np.percentile(normal_dist, 3)
iqr = q3 - q1

print("min: ", min)
print("max: ", max)
print("q1: ", q1)
print("q3: ", q3)
print("iqr: ", iqr)

"""Compute the **variance** and **standard deviation**"""

variance = np.var(normal_dist)
std_dev = np.std(normal_dist)

print("variance: ", variance)
print("std_dev: ", std_dev)

"""Compute the **skewness** and **kurtosis**"""

from scipy.stats import kurtosis, skew

skewness = sci.stats.skew(normal_dist)
kurtosis = sci.stats.kurtosis(normal_dist)

print("skewness: ", skewness)
print("kurtosis: ", kurtosis)

"""## NumPy Correlation Calculation

Create an array x of integers between 10 (inclusive) and 20 (exclusive). Use `np.arange()`
"""

x = np.arange(10, 20)
x

"""Then use `np.array()` to create a second array y containing 10 arbitrary integers."""

y = np.array(np.random.randint(100, size=10))
y

"""Once you have two arrays of the same length, you can compute the **correlation coefficient** between x and y"""

r = np.corrcoef(x, y)
r

"""## Pandas Correlation Calculation

Run the code below
"""

x = pd.Series(range(10, 20))
y = pd.Series([2, 1, 4, 5, 8, 12, 18, 25, 96, 48])

"""Call the relevant method  to calculate Pearson's r correlation."""

from scipy.stats.stats import pearsonr

r = pearsonr(x, y)
r

"""OPTIONAL. Call the relevant method to calculate Spearman's rho correlation."""

from scipy.stats import spearmanr

rho = spearmanr(x, y)
rho

"""## Seaborn Dataset Tips

Import Seaborn Library
"""

import seaborn as sns

"""Load "tips" dataset from Seaborn"""

tips = sns.load_dataset("tips")
tips

"""Generate descriptive statistics include those that summarize the central tendency, dispersion"""

tips.describe()

"""Call the relevant method to calculate pairwise Pearson's r correlation of columns"""

tips.columns

tips.corr(method='pearson', min_periods=1)

